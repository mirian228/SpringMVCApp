CREATE TABLE Person(
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR NOT NULL,
	age INT CHECK (age > 0),
	email VARCHAR UNIQUE
)

CREATE TABLE Director(
	director_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(100) NOT NULL UNIQUE,
	age INT CHECK (age > 10)
);



CREATE TABLE Movie(
	movie_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	director_id INT NOT NULL REFERENCES Director(director_id),
	name VARCHAR(200) NOT NULL,
	year_of_production int CHECK(year_of_production > 1900)
);


INSERT INTO Director(name, age) VALUES ('Quentin Tarantino', 57);
INSERT INTO Director(name, age) VALUES ('Martin Scorsese', 78);
INSERT INTO Director(name, age) VALUES ('Guy Ritchie', 52);
INSERT INTO Director(name, age) VALUES ('Woody Allen', 85);
INSERT INTO Director(name, age) VALUES ('David Lynch', 74);
INSERT INTO Director(name, age) VALUES ('Christopher Nolan', 50);

INSERT INTO Movie(director_id, name, year_of_production) VALUES (1, 'Reservoir Dogs', 1992);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (1, 'Pulp Fiction', 1994);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (1, 'The Hateful Eight', 2015);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (1, 'Once Upon a Time in Hollywood', 2019);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (2, 'Taxi Driver', 1976);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (2, 'Goodfellas', 1990);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (2, 'The Wolf of Wall Street', 2013);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (3, 'Lock, Stock and Two Smoking Barrels', 1998);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (3, 'Snatch', 2000);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (4, 'Midnight in Paris', 2011);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (6, 'Inception', 2010);

-- NO RESULT Because we don't have Director with id 7--
INSERT INTO Movie(director_id, name, year_of_production) VALUES (7, 'BB', 2020);
-- Inner JOIN of Two tables --
SELECT Director.name, Movie.name FROM Director JOIN Movie ON Director.director_id = Movie.director_id;
-- Left Join of two tables --
SELECT Director.name, Movie.name FROM Director LEFT JOIN Movie ON Director.director_id = Movie.director_id;

CREATE TABLE Citizen(
	citizen_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(100) NOT NULL,
	age int CHECK(age > 0)
)

CREATE TABLE Passport(
	citizen_id INT PRIMARY KEY REFERENCES Citizen(citizen_id),
	passport_number int
)

INSERT INTO Citizen(name, age) VALUES ('Bob', 12);
INSERT INTO Citizen(name, age) VALUES ('Tom', 24);
INSERT INTO Citizen(name, age) VALUES ('Katy', 39);
INSERT INTO Citizen(name, age) VALUES ('Alice', 45);

INSERT INTO Passport(citizen_id, passport_number) VALUES (1, 12345);
INSERT INTO Passport(citizen_id, passport_number) VALUES (2, 75124);
INSERT INTO Passport(citizen_id, passport_number) VALUES (3, 91245);
INSERT INTO Passport(citizen_id, passport_number) VALUES (4, 19259);

-- We cannot add more than one passport to a person because we have one to one relationship --
INSERT INTO Passport(citizen_id, passport_number) VALUES (3, 12455);

-- We cannot add passport to unexisting citizen --
INSERT INTO Passport(citizen_id, passport_number) VALUES (10, 12455);

-- Inner Join --
SELECT name, passport_number FROM citizen JOIN passport ON Citizen.citizen_id = Passport.citizen_id;

-- Left Join Gives same result in this case --
SELECT name, passport_number FROM citizen LEFT JOIN passport ON Citizen.citizen_id = Passport.citizen_id;
-- Add person without passport and now if we try left join it will give different result --
INSERT INTO Citizen(name, age) VALUES ('Jane', 1);
SELECT name, passport_number FROM citizen LEFT JOIN passport ON Citizen.citizen_id = Passport.citizen_id;

CREATE TABLE Actor(
	actor_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(100) NOT NULL UNIQUE,
	age INT CHECK(age > 0)
);

INSERT INTO Actor(name, age) VALUES ('Harvey Keitel', 81);
INSERT INTO Actor(name, age) VALUES ('Robert De Niro', 77);
INSERT INTO Actor(name, age) VALUES ('Leonardo DiCaprio', 46);
INSERT INTO Actor(name, age) VALUES ('Jason Statham', 53);
INSERT INTO Actor(name, age) VALUES ('Joe Pesci', 77);
INSERT INTO Actor(name, age) VALUES ('Samuel L. Jackson', 72);

CREATE TABLE Actor_Movie(
	actor_id INT REFERENCES Actor(actor_id),
	movie_id INT REFERENCES Movie(movie_id),
	PRIMARY KEY(actor_id, movie_id)
)


INSERT INTO Actor_Movie VALUES(1, 1);
INSERT INTO Actor_Movie VALUES(1, 2);
INSERT INTO Actor_Movie VALUES(2, 5);
INSERT INTO Actor_Movie VALUES(2, 6);
INSERT INTO Actor_Movie VALUES(3, 4);
INSERT INTO Actor_Movie VALUES(3, 7);
INSERT INTO Actor_Movie VALUES(3, 11);
INSERT INTO Actor_Movie VALUES(4, 8);
INSERT INTO Actor_Movie VALUES(4, 9);
INSERT INTO Actor_Movie VALUES(5, 6);
INSERT INTO Actor_Movie VALUES(6, 2);
INSERT INTO Actor_Movie VALUES(6, 3);

-- Cannot Insert Duplicates because our columns are Primary --
INSERT INTO Actor_Movie VALUES(6, 3);
-- Inner join Tables with many to many relationship --
SELECT Actor.name, Movie.name FROM Actor JOIN actor_movie ON actor.actor_id = actor_movie.actor_id JOIN movie ON actor_movie.movie_id = movie.movie_id;


SELECT * FROM Director;
SELECT * FROM Movie;
SELECT * FROM Citizen;
SELECT * FROM Passport;
SELECT * FROM Actor;
SELECT * FROM Person;

